#!/bin/bash (only for editors)
#
# This file should be sourced from /etc/portage/env/$CATEGORY/$PACKAGE*
#
# It provides several functions which are useful to patch packages during
# emerging, in particular mv_patch, see below.
#
# Since the most frequent use is to redefine the post_src_prepare
# (or post_src_unpack in case of EAPI=0 or 1)
# you can pass some arguments when sourcing this script:
#
# In this case, the above mentioned function (or the function $MV_OVERRIDE
# if the latter variable has been set) is defined to call
# "mv_patch" (see below) with your arguments and be somewhat verbose about it.

# Usage: mv_patch PATCH1 PATCH2 ... [shell [some shell code]]
#
# Applies all PATCHes, being verbose and failing if at least one PATCH fails.
#
# Each PATCH is either a filename (or a part thereof, see below)
# or of the form -e expression FILENAME.
#
# If PATCH is a filename, but not an absolute filename, it is searched
# in the directories /etc/portage/env/patches/, $MV_PATCHES, and $FILESDIR.
# You may omit a leading $PF-/$P-/$PN- or a trailing .patch/.diff
# Only the first matching filename is used for each PATCH.
#
# If PATCH is of the form -e expression FILENAME, then expression is used
# as an sed expression to apply to FILENAME. (Note that by the above mentioned
# eval you might have to quote expression twice)
# If FILE is not an absolute pathname it is assumed to be relative to $S.
#

mv_epatch() {
	local mv_epatch_cmd mv_epatch_file my_epatch_count mv_epatch_error \
		patch P4CONFIG P4PORT P4USER
	# Handle aliased patch command #404447 #461568
	patch=patch
	eval $(alias patch 2>/dev/null | sed 's:^alias ::')
	unset P4CONFIG P4PORT P4USER # keep perforce at bay #56402
	test -r "$1" || mv_die "cannot find mv's patch $1"
	ebegin "mv patch application: $1"
	mv_epatch_file=$1
	mv_epatch_cmd=
	case ${1##*.} in
	xz)
		mv_epatch_cmd='xz -dc';;
	lzma)
		mv_epatch_cmd='lzma -dc';;
	bz2)
		mv_epatch_cmd='bzip2 -dc';;
	gz|Z|z)
		mv_epatch_cmd='gzip -dc';;
	ZIP|zip)
		mv_epatch_cmd='unzip -p';;
	esac
	if [ -n "$mv_epatch_cmd" ]
	then	mv_epatch_file=$T/mv_epatch.current
		$mv_epatch_cmd <"$1" >"$mv_epatch_file" \
			|| mv_die "failed to uncompress patch $1"
	fi
	mv_epatch_count=0
	# Skip -p0 if absolute paths are used
	[ -z "$(sed -n -e '/^[-+][-+][-+] \//{s!^[-+][-+][-+] /dev/null!!;p}' \
		-- "$mv_epatch_file")" ] || mv_epatch_count=1
	# Reject patches with relative paths
	grep -Eq '^[-+]{3} [^	]*[.][.]/' -- "$mv_epatch_file" >/dev/null 2>&1 \
		&& mv_die 'patch uses relative paths ../'
	mv_epatch_error=
	while [ $mv_epatch_count -lt 5 ]
	do	mv_epatch_cmd="$patch -p$mv_epatch_count -g0 -E --no-backup-if-mismatch"
		mv_epatch_error=$mv_epatch_error"
$mv_epatch_cmd
$($mv_epatch_cmd --dry-run -f <"$mv_epatch_file" 2>&1)" && {
			mv_epatch_count=
			break
		}
		mv_epatch_count=$(( $mv_epatch_count + 1 ))
	done
	[ -z "$mv_epatch_count" ] || mv_die "patch $1 cannot be applied:$mv_epatch_error"
	mv_epatch_error="
$mv_epatch_cmd
$($mv_epatch_cmd <"$mv_epatch_file" 2>&1)" \
		|| mv_die "application of patch $1 failed:$mv_epatch_error"
	eend 0
}

mv_patch() {
	while [ $# -gt 0 ]
	do	case $1 in
		-e)	shift
			mv_sed "$1" "$2" || return 1
			shift 2;;
		shell)	shift
			"$@"
			return;;
		*)	mv_patchfile "$1" || return 1
			shift;;
		esac
	done
	return 0
}

mv_patchfile() {
	local mv_n mv_pt mv_pt1 mv_pt2 mv_tl mv_px mv_sx
	case $1 in
	/*)
		unset MV_PATCHES
		mv_pt1=
		mv_pt2=
		mv_pt=${1%/*}
		mv_tl=${1##*/};;
	*)
		mv_pt=${PORTAGE_CONFIGROOT%/}/etc/portage/env
		mv_pt1=${mv_pt%/}/local/patches
		mv_pt=${mv_pt%/}/patches
		mv_pt2=${mv_pt%/}/local
		mv_tl=$1;;
	esac
	for mv_pt in \
		${MV_PATCHES:+"${MV_PATCHES%/}/"} \
		${mv_pt1:+"${mv_pt1%/}/"} \
		${mv_pt2:+"${mv_pt2%/}/"} \
		"${mv_pt%/}/" \
		${FILESDIR:+"${FILESDIR%/}/"}
	do	for mv_px in "$PN-$PR-" "$P-" "$PN:$SLOT-" "$PN-" ''
		do	for mv_sx in '' '.patch' '.diff'
			do	mv_n=$mv_pt$mv_px$mv_tl$mv_sx
				test -e "$mv_n" || continue
				mv_epatch "$mv_n" && return
			done
		done
	done
	mv_die "Patch $1 not found"
}

declare -a MV_SED

mv_sed() {
	local mv_n mv_r mv_t
	eval mv_n=\${$#}
	einfo "Patching $mv_n"
	case $mv_n in
	/*)
		mv_r=$mv_n;;
	*)
		mv_r=$S/$mv_n;;
	esac
	test -e "$mv_r" || mv_die "file $mv_r not found"
	MV_SED=("$@")
	MV_SED[$(( $# - 1 ))]='--'
	mv_t=$T/mv_sed
	sed -e "${MV_SED[@]}" "$mv_r" >"$mv_t" \
	&& chmod --reference="$mv_r" "$mv_t" || mv_die "patching $mv_r failed"
	chown --reference="$mv_r" "$mv_t" >/dev/null 2>&1
	cmp -s -- "$mv_r" "$mv_t" && mv_die "patching $mv_r had no effect"
	mv -- "$mv_t" "$mv_r" || mv_die "cannot move $mv_t -> $mv_r"
}

# Usage: mv_start [-]
#
# This gives a descriptive message about the file and that a hack is
# going to be applied.
#
# Moreover, unless you pass the argument "-", the directory is changed to
# $S (if it exists) or $WORKDIR (otherwise).
mv_start() {
	local cdto f
	f=${PORTAGE_CONFIGROOT%/}/etc/portage/env/$CATEGORY/$PN*
	einfo "mv's hack: $f"
	[ $# -gt 0 ] && [ "$1" = '-' ] && return 0
	test -d "$S" && cdto=$S || cdto=$WORKDIR
	cd -- "$cdto" >/dev/null || mv_die "could not cd to $cdto"
}

# Usage: mv_end
#
# Depending on the error state, this gives either the message that the
# hack was successfully applied or that it had failed.
# In the latter case it dies.
#
mv_end() {
	if [ ${1:-$?} -eq 0 ]
	then	mv_end_ok
	else	mv_end_die
	fi
}

mv_end_ok() {
	local f
	f=${PORTAGE_CONFIGROOT%/}/etc/portage/env/$CATEGORY/$PN*
	elog "mv's hack from $f applied"
}

mv_end_die() {
	local f
	f=${PORTAGE_CONFIGROOT%/}/etc/portage/env/$CATEGORY/$PN*
	die "mv's hack from $f failed"
}

mv_die() {
	[ $# -eq 0 ] || eerror "$*"
	mv_end_die
}

if [ $# -eq 1 ] && case $1 in
"${PORTAGE_CONFIGROOT%/}/etc/portage/env/$CATEGORY/$PN"*|*profile.bashrc)
	false;;
esac || [ $# -gt 1 ]
then	[ -z "${MV_OVERRIDE:++}" ] && case ${EAPI:-0} in
	[01])
		MV_OVERRIDE='post_src_unpack';;
	*)
		MV_OVERRIDE='post_src_prepare';;
	esac
	quoteargs=`printf ' %q' "$@"`
	eval "$MV_OVERRIDE() {
	mv_start && mv_patch$quoteargs
	mv_end
}"
	unset quoteargs
fi
